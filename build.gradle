buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
    }
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'example03'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}


configurations.all {
    exclude group: "commons-logging",
            module: "commons-logging"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def queryDslVersion = '4.1.3'

dependencies {
    compile("com.querydsl:querydsl-core:${queryDslVersion}")
    compile("com.querydsl:querydsl-jpa:${queryDslVersion}")
}
dependencies {

    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("com.h2database:h2")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    compile("org.springframework.boot:spring-boot-starter-web")

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-nop
    testCompile group: 'org.slf4j', name: 'slf4j-nop', version: '1.8.0-beta2'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-entitymanager
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.4.1.Final'

    //compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-actuator-docs:${springBootVersion}")

    //compile("org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauth2Version}")
    //compile("org.springframework.security:spring-security-jwt:1.0.5.RELEASE")

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.4.0'

    testImplementation('org.junit.jupiter:junit-jupiter:5.4.0')

    compileOnly("org.projectlombok:lombok:1.16.8")

    compile("com.querydsl:querydsl-jpa:${queryDslVersion}")
    compile("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

    compileOnly 'org.projectlombok:lombok:1.16.18'
    annotationProcessor(
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
            "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
            "javax.annotation:javax.annotation-api:1.3.2",
            "org.projectlombok:lombok"
    )

}

clean.doLast {
    // clean-up directory when necessary
    file(new File(projectDir, "/src/main/generated")).deleteDir()
    file(new File(projectDir, "/src/main/generated_tests")).deleteDir()
}

idea {
    module {
        sourceDirs += file('src/main/generated/')
        generatedSourceDirs += file('src/main/generated/')
    }
}

def queryDslOutput = file("src/main/generated")

sourceSets {
    main {
        java {
            srcDir "src/main/generated"
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build') {
    doFirst {
        if (!queryDslOutput.exists()) {
            logger.info("Creating `$queryDslOutput` directory")

            if (!queryDslOutput.mkdirs()) {
                throw new InvalidUserDataException("Unable to create `$queryDslOutput` directory")
            }
        }
    }

    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor",
            "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = queryDslOutput
}

clean {
    delete queryDslOutput
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}